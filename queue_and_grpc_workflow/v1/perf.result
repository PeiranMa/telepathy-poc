kafka itself 
1 p, 1 c, 50k / s 




================================================================
10 ** 6 msg, 1 producer, 32 consumer, 1 partition, job cost 10ms

10000 msg / 100 s = 100 msg / s


================================================================
10 ** 6 msg, 1 producer, 32 consumer, 32 partition, job cost 10ms

10000 msg / 3.x s ~ real time



================================================================
10 ** 6 msg, 1 producer, 32 consumer, 32 partition, job cost 0ms

2020-05-12 03:17:39,770 monitor 10000 tasks cost 13.441574573516846 sec
2020-05-12 03:17:42,435 monitor 500000 tasks cost 16.106945753097534 sec

185,185 / s


====================================================================
10 ** 6 msg, 1 producer, 32 partition, 1 consumer, 32 workers, round robin pick workers, job cost 0ms
grpc stream push

400000  / 155.03704023361206 sec = 2580 msg/s
680000 / 228.40994882583618 = 2982 msg / s
820000 / 265 = 3094 msg / s


====================================================================
10 ** 6 msg, 1 producer, 32 partition, 3 consumer, 32 workers, round robin pick workers, job cost 0ms
grpc stream push

5000 msg / s


cons:
1. topic数不能太多。分区如果改变 | consumer数改变 => consumer rebalance ，rebalance会暂停。 导致一定的卡顿
看起来更像 consumer适合long running ？

2. consumer没有丰富的scheduling策略

弯路：
试过加入dispatcher，用grpc分发到worker。但是这个dispatcher就变成了bottleneck。 有可能可以把dispatcher作为一个long running service？ computer node 动态作为其下游

可以继续试一试RabbitMQ