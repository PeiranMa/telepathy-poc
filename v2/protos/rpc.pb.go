// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.12.1
// source: rpc.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type JobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID  string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	ReqNum int32  `protobuf:"varint,2,opt,name=reqNum,proto3" json:"reqNum,omitempty"`
}

func (x *JobRequest) Reset() {
	*x = JobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest) ProtoMessage() {}

func (x *JobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRequest.ProtoReflect.Descriptor instead.
func (*JobRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *JobRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *JobRequest) GetReqNum() int32 {
	if x != nil {
		return x.ReqNum
	}
	return 0
}

type JobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
}

func (x *JobResponse) Reset() {
	*x = JobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResponse) ProtoMessage() {}

func (x *JobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResponse.ProtoReflect.Descriptor instead.
func (*JobResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *JobResponse) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type TaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID  string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	TaskID int32  `protobuf:"varint,2,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *TaskRequest) GetTaskID() int32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type TaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID  string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	TaskID int32  `protobuf:"varint,2,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *TaskResponse) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *TaskResponse) GetTaskID() int32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22,
	0x23, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4a,
	0x6f, 0x62, 0x49, 0x44, 0x22, 0x3b, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x22, 0x3c, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32,
	0xee, 0x01, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x76, 0x63, 0x12,
	0x35, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x12, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x43, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x76, 0x63, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rpc_proto_goTypes = []interface{}{
	(*JobRequest)(nil),   // 0: protos.JobRequest
	(*JobResponse)(nil),  // 1: protos.JobResponse
	(*TaskRequest)(nil),  // 2: protos.TaskRequest
	(*TaskResponse)(nil), // 3: protos.TaskResponse
}
var file_rpc_proto_depIdxs = []int32{
	0, // 0: protos.FrontendSvc.create_job:input_type -> protos.JobRequest
	2, // 1: protos.FrontendSvc.send_task:input_type -> protos.TaskRequest
	0, // 2: protos.FrontendSvc.get_response:input_type -> protos.JobRequest
	0, // 3: protos.FrontendSvc.close_job:input_type -> protos.JobRequest
	2, // 4: protos.WorkerSvc.send_task:input_type -> protos.TaskRequest
	1, // 5: protos.FrontendSvc.create_job:output_type -> protos.JobResponse
	3, // 6: protos.FrontendSvc.send_task:output_type -> protos.TaskResponse
	3, // 7: protos.FrontendSvc.get_response:output_type -> protos.TaskResponse
	1, // 8: protos.FrontendSvc.close_job:output_type -> protos.JobResponse
	3, // 9: protos.WorkerSvc.send_task:output_type -> protos.TaskResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FrontendSvcClient is the client API for FrontendSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendSvcClient interface {
	CreateJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	SendTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetResponse(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (FrontendSvc_GetResponseClient, error)
	CloseJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
}

type frontendSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendSvcClient(cc grpc.ClientConnInterface) FrontendSvcClient {
	return &frontendSvcClient{cc}
}

func (c *frontendSvcClient) CreateJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/protos.FrontendSvc/create_job", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendSvcClient) SendTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/protos.FrontendSvc/send_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendSvcClient) GetResponse(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (FrontendSvc_GetResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FrontendSvc_serviceDesc.Streams[0], "/protos.FrontendSvc/get_response", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendSvcGetResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrontendSvc_GetResponseClient interface {
	Recv() (*TaskResponse, error)
	grpc.ClientStream
}

type frontendSvcGetResponseClient struct {
	grpc.ClientStream
}

func (x *frontendSvcGetResponseClient) Recv() (*TaskResponse, error) {
	m := new(TaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendSvcClient) CloseJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/protos.FrontendSvc/close_job", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendSvcServer is the server API for FrontendSvc service.
type FrontendSvcServer interface {
	CreateJob(context.Context, *JobRequest) (*JobResponse, error)
	SendTask(context.Context, *TaskRequest) (*TaskResponse, error)
	GetResponse(*JobRequest, FrontendSvc_GetResponseServer) error
	CloseJob(context.Context, *JobRequest) (*JobResponse, error)
}

// UnimplementedFrontendSvcServer can be embedded to have forward compatible implementations.
type UnimplementedFrontendSvcServer struct {
}

func (*UnimplementedFrontendSvcServer) CreateJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (*UnimplementedFrontendSvcServer) SendTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}
func (*UnimplementedFrontendSvcServer) GetResponse(*JobRequest, FrontendSvc_GetResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResponse not implemented")
}
func (*UnimplementedFrontendSvcServer) CloseJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseJob not implemented")
}

func RegisterFrontendSvcServer(s *grpc.Server, srv FrontendSvcServer) {
	s.RegisterService(&_FrontendSvc_serviceDesc, srv)
}

func _FrontendSvc_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendSvcServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FrontendSvc/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendSvcServer).CreateJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendSvc_SendTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendSvcServer).SendTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FrontendSvc/SendTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendSvcServer).SendTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendSvc_GetResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrontendSvcServer).GetResponse(m, &frontendSvcGetResponseServer{stream})
}

type FrontendSvc_GetResponseServer interface {
	Send(*TaskResponse) error
	grpc.ServerStream
}

type frontendSvcGetResponseServer struct {
	grpc.ServerStream
}

func (x *frontendSvcGetResponseServer) Send(m *TaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FrontendSvc_CloseJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendSvcServer).CloseJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FrontendSvc/CloseJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendSvcServer).CloseJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontendSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.FrontendSvc",
	HandlerType: (*FrontendSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_job",
			Handler:    _FrontendSvc_CreateJob_Handler,
		},
		{
			MethodName: "send_task",
			Handler:    _FrontendSvc_SendTask_Handler,
		},
		{
			MethodName: "close_job",
			Handler:    _FrontendSvc_CloseJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get_response",
			Handler:       _FrontendSvc_GetResponse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// WorkerSvcClient is the client API for WorkerSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerSvcClient interface {
	SendTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type workerSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerSvcClient(cc grpc.ClientConnInterface) WorkerSvcClient {
	return &workerSvcClient{cc}
}

func (c *workerSvcClient) SendTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/protos.WorkerSvc/send_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerSvcServer is the server API for WorkerSvc service.
type WorkerSvcServer interface {
	SendTask(context.Context, *TaskRequest) (*TaskResponse, error)
}

// UnimplementedWorkerSvcServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerSvcServer struct {
}

func (*UnimplementedWorkerSvcServer) SendTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}

func RegisterWorkerSvcServer(s *grpc.Server, srv WorkerSvcServer) {
	s.RegisterService(&_WorkerSvc_serviceDesc, srv)
}

func _WorkerSvc_SendTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerSvcServer).SendTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.WorkerSvc/SendTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerSvcServer).SendTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.WorkerSvc",
	HandlerType: (*WorkerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send_task",
			Handler:    _WorkerSvc_SendTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
